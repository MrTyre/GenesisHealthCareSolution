/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projet.UI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import projet.sih.Adresse;
import projet.sih.CHUPP;
import projet.sih.Interne;
import projet.sih.PH;
import projet.sih.Patient;
import projet.sih.Informaticien;
import projet.sih.PersonnelInfirmier;
import projet.sih.Secretaire;

/**
 *
 * @author Manounette
 */
public class ServiceInformatiqueAjouterPersonnelIU extends javax.swing.JFrame {

    private ServiceInformatiqueIU si;
    private ConnexionUI connexionUI;
    private String sql;

    /**
     * Creates new form ServiceInformatiqueAjouterPersonnelIU
     */
    public ServiceInformatiqueAjouterPersonnelIU() throws FileNotFoundException, IOException, SQLException {
        initComponents();
        setResizable(false);
        FileInputStream input = new FileInputStream("src/Images/GenesisHealthCareSolution.png");
        BufferedImage myPicture = ImageIO.read(input);
        ImageIcon image = new ImageIcon(myPicture);
        jLabel1.setIcon(image);
        jLabel1.setVisible(true);
        jComboBoxService.setModel(CHUPP.getListeService());
        JMenuBar jmb = new JMenuBar();
        JMenu menu1 = new JMenu("Fichier");
        JMenu menu2 = new JMenu("Aide");
        JMenuItem deco = new JMenuItem("Deconnexion");
        JMenuItem leave = new JMenuItem("Quitter");
        JMenuItem javadoc = new JMenuItem("Documentation technique");
        JMenuItem helputil = new JMenuItem("Aide utilisateur");
        menu1.add(deco);
        menu1.add(leave);
        menu2.add(javadoc);
        menu2.add(helputil);
        jmb.add(menu1);
        jmb.add(menu2);
        setJMenuBar(jmb);

        deco.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    connexionUI = new ConnexionUI();
                } catch (IOException ex) {
                    Logger.getLogger(ServiceCliniqueIU.class.getName()).log(Level.SEVERE, null, ex);
                }
                connexionUI.setLocationRelativeTo(null);
                connexionUI.setVisible(true);
                setVisible(false);
            }
        });
        leave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelNouveauPersonnel = new javax.swing.JLabel();
        jLabelStatut = new javax.swing.JLabel();
        jComboBoxStatut = new javax.swing.JComboBox();
        jLabelNom = new javax.swing.JLabel();
        jLabelPrenom = new javax.swing.JLabel();
        jLabelService = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jTextFieldPrenom = new javax.swing.JTextField();
        jComboBoxService = new javax.swing.JComboBox();
        jButtonOK = new javax.swing.JButton();
        jButtonRetour = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelNouveauPersonnel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelNouveauPersonnel.setForeground(new java.awt.Color(0, 51, 153));
        jLabelNouveauPersonnel.setText("Nouveau personnel médical");

        jLabelStatut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelStatut.setText("Statut :");

        jComboBoxStatut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBoxStatut.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chef de Service", "Praticien Hospitalier", "Personnel Infirmier", "Interne", "Secrétaire Médicale", "Informaticien" }));
        jComboBoxStatut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStatutActionPerformed(evt);
            }
        });

        jLabelNom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelNom.setText("Nom :");

        jLabelPrenom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelPrenom.setText("Prénom :");

        jLabelService.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelService.setText("Service :");

        jTextFieldNom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTextFieldPrenom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jComboBoxService.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBoxService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxServiceActionPerformed(evt);
            }
        });

        jButtonOK.setBackground(new java.awt.Color(153, 153, 255));
        jButtonOK.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonRetour.setBackground(new java.awt.Color(153, 153, 255));
        jButtonRetour.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonRetour.setText("Annuler");
        jButtonRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabelNouveauPersonnel)
                                        .addGap(45, 45, 45))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabelPrenom)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldPrenom))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelNom)
                                            .addComponent(jLabelStatut))
                                        .addGap(11, 12, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboBoxStatut, 0, 180, Short.MAX_VALUE)
                                            .addComponent(jTextFieldNom)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabelService)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxService, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonRetour, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNouveauPersonnel)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStatut)
                    .addComponent(jComboBoxStatut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNom)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrenom)
                    .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelService))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRetour)
                    .addComponent(jButtonOK))
                .addContainerGap())
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetourActionPerformed
        setVisible(false);
        try {
            si = new ServiceInformatiqueIU();
        } catch (IOException ex) {
            Logger.getLogger(ServiceInformatiqueAjouterPersonnelIU.class.getName()).log(Level.SEVERE, null, ex);
        }
        si.setLocationRelativeTo(null);
        si.setResizable(false);
        si.setVisible(true);
    }//GEN-LAST:event_jButtonRetourActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        try {
            ajouterPersonnel();
        } catch (SQLException ex) {
            Logger.getLogger(ServiceInformatiqueAjouterPersonnelIU.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jComboBoxServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxServiceActionPerformed

    }//GEN-LAST:event_jComboBoxServiceActionPerformed

    private void jComboBoxStatutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStatutActionPerformed
        if ((((String) jComboBoxStatut.getSelectedItem()).equals("Informaticien")) || (((String) jComboBoxStatut.getSelectedItem()).equals("Secrétaire Médicale"))) {
            jLabelService.setVisible(false);
            jComboBoxService.setVisible(false);
            this.repaint();
        } else {
            jLabelService.setVisible(true);
            jComboBoxService.setVisible(true);
            this.repaint();
        }
    }//GEN-LAST:event_jComboBoxStatutActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonRetour;
    private javax.swing.JComboBox jComboBoxService;
    private javax.swing.JComboBox jComboBoxStatut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JLabel jLabelNouveauPersonnel;
    private javax.swing.JLabel jLabelPrenom;
    private javax.swing.JLabel jLabelService;
    private javax.swing.JLabel jLabelStatut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldPrenom;
    // End of variables declaration//GEN-END:variables
    public String generate() {
        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"; // Tu supprimes les lettres dont tu ne veux pas
        String pass = "";
        for (int x = 0; x < 5; x++) {
            int i = (int) Math.floor(Math.random() * 62); // Si tu supprimes des lettres tu diminues ce nb
            pass += chars.charAt(i);
        }
        return pass;
    }

    public void ajouterPersonnel() throws SQLException {
        if ((jTextFieldNom.getText().equals(""))
                || (jTextFieldPrenom.getText().equals(""))) {
            JOptionPane jop1 = new JOptionPane();
            jop1.showMessageDialog(null, "Il manque des informations relatives au personnel", "Attention", JOptionPane.WARNING_MESSAGE);
        } else {
            String nom = jTextFieldNom.getText();
            String prenom = jTextFieldPrenom.getText();
            String service = "";
            String sph = "SELECT * FROM practicien_hospitalier";
            String sinf = "SELECT * FROM infirmier";
            String sint = "SELECT * FROM interne";
            String ssec = "SELECT * FROM secretaire";
            String sinfo = "SELECT * FROM informaticien";

            ResultSet rph = CHUPP.getRequete(sph);
            ResultSet rinf = CHUPP.getRequete(sinf);
            ResultSet rint = CHUPP.getRequete(sint);
            ResultSet rsec = CHUPP.getRequete(ssec);
            ResultSet rinfo = CHUPP.getRequete(sinfo);

            if (((String) jComboBoxStatut.getSelectedItem()).equals("Chef de Service") || ((String) jComboBoxStatut.getSelectedItem()).equals("Praticien Hospitalier")) {
                service = ((String) jComboBoxService.getSelectedItem());
                try {
                    while (rph.next()) {
                        if ((rph.getString("nom").equals(nom)) && (rph.getString("prenom").equals(prenom))) {
                            JOptionPane j = new JOptionPane();
                            j.showMessageDialog(null, "Le personnel existe déjà", "Attention", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        } else {
                            sql = "INSERT INTO practicien_hospitalier VALUES (" + PH.getIDPH() + ", '" + nom + "', '" + prenom + "', '" + service + "', '" + generate() + "')";
                            CHUPP.getInsert(sql);
                            if (((String) jComboBoxStatut.getSelectedItem()).equals("Chef de Service")) {
                                String sql2 = "UPDATE service_clinique SET chef_service =" + (PH.getIDPH() - 1) + " where specialite ='" + service + "'";
                                CHUPP.getInsert(sql2);
                            }
                            JOptionPane jop1 = new JOptionPane();
                            jop1.showMessageDialog(null, "Le personnel a correctement été ajouté !", "Personnel ajouté", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Failed to get Statement");
                    e.printStackTrace();
                }
            } else if (((String) jComboBoxStatut.getSelectedItem()).equals("Personnel Infirmier")) {
                service = ((String) jComboBoxService.getSelectedItem());
                try {
                    while (rinf.next()) {
                        if ((rinf.getString("nom").equals(nom)) && (rinf.getString("prenom").equals(prenom))) {
                            JOptionPane j = new JOptionPane();
                            j.showMessageDialog(null, "Le personnel existe déjà", "Attention", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        } else {
                            sql = "INSERT INTO infirmier VALUES (" + PersonnelInfirmier.getIDInf() + ", '" + nom + "', '" + prenom + "', '" + service + "', '" + generate() + "')";
                            CHUPP.getInsert(sql);
                            JOptionPane jop1 = new JOptionPane();
                            jop1.showMessageDialog(null, "Le personnel a correctement été ajouté !", "Personnel ajouté", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Failed to get Statement");
                    e.printStackTrace();
                }
            } else if (((String) jComboBoxStatut.getSelectedItem()).equals("Interne")) {
                service = ((String) jComboBoxService.getSelectedItem());
                try {
                    while (rint.next()) {
                        if ((rint.getString("nom").equals(nom)) && (rint.getString("prenom").equals(prenom))) {
                            JOptionPane j = new JOptionPane();
                            j.showMessageDialog(null, "Le personnel existe déjà", "Attention", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        } else {
                            sql = "INSERT INTO interne VALUES (" + Interne.getIDint() + ", '" + nom + "', '" + prenom + "', '" + service + "', '" + generate() + "')";
                            CHUPP.getInsert(sql);
                            JOptionPane jop1 = new JOptionPane();
                            jop1.showMessageDialog(null, "Le personnel a correctement été ajouté !", "Personnel ajouté", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Failed to get Statement");
                    e.printStackTrace();
                }
            } else if (((String) jComboBoxStatut.getSelectedItem()).equals("Secrétaire Médicale")) {
                try {
                    while (rsec.next()) {
                        if ((rsec.getString("nom").equals(nom)) && (rsec.getString("prenom").equals(prenom))) {
                            JOptionPane j = new JOptionPane();
                            j.showMessageDialog(null, "Le personnel existe déjà", "Attention", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        } else {
                            sql = "INSERT INTO secretaire VALUES (" + Secretaire.getIDSec() + ", '" + nom + "', '" + prenom + "', '" + generate() + "')";
                            CHUPP.getInsert(sql);
                            JOptionPane jop1 = new JOptionPane();
                            jop1.showMessageDialog(null, "Le personnel a correctement été ajouté !", "Personnel ajouté", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Failed to get Statement");
                    e.printStackTrace();
                }
            } else if (((String) jComboBoxStatut.getSelectedItem()).equals("Informaticien")) {
                try {
                    while (rinfo.next()) {
                        if ((rinfo.getString("nom").equals(nom)) && (rinfo.getString("prenom").equals(prenom))) {
                            JOptionPane j = new JOptionPane();
                            j.showMessageDialog(null, "Le personnel existe déjà", "Attention", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        } else {
                            sql = "INSERT INTO informaticien VALUES (" + Informaticien.getIDInfo() + ", '" + nom + "', '" + prenom + "', '" + generate() + "')";
                            CHUPP.getInsert(sql);
                            JOptionPane jop1 = new JOptionPane();
                            jop1.showMessageDialog(null, "Le personnel a correctement été ajouté !", "Personnel ajouté", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Failed to get Statement");
                    e.printStackTrace();
                }
            }
        }
        jTextFieldNom.setText("");
        jTextFieldPrenom.setText("");
        jComboBoxStatut.setSelectedIndex(0);
        jComboBoxService.setSelectedIndex(0);
    }
}
