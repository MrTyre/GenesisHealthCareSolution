/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projet.UI;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import projet.sih.*;

/**
 *
 * @author Marina
 */
public class ConnexionUI extends javax.swing.JFrame {

    private ServiceCliniqueIU sc;
    private ServiceCliniqueSecretaireUI scs;
    private ServiceInformatiqueIU si;
    private ServiceMedicoTechniquesIU smt;
    //private ServiceAdmission sa;
    private CHUPP chupp;

    /**
     * Creates new form ConnexionUI
     */
    public ConnexionUI() {

        initComponents();
        this.chupp = new CHUPP();
        setLocationRelativeTo(null); 
        ImageIcon image = new ImageIcon("../Princeton-Plainsboro.jpg");
        jLabel1.setIcon(image);
        jLabel1.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelId = new javax.swing.JLabel();
        jLabelMdp = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jButtonOK = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabelId.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabelId.setText("Identifiant : ");

        jLabelMdp.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabelMdp.setText("Mot de passe : ");

        jTextFieldId.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextFieldId.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonOK.setBackground(new java.awt.Color(153, 153, 153));
        jButtonOK.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelId)
                            .addComponent(jLabelMdp))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldId, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(jPasswordField1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMdp)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButtonOK)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        connexion();
        setVisible(false);
    }//GEN-LAST:event_jButtonOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnexionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnexionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnexionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnexionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnexionUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelMdp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextFieldId;
    // End of variables declaration//GEN-END:variables

    public void connexion() {
        String id = jTextFieldId.getText();
        String mdp = jPasswordField1.getText();
        String spe = "";

        while (spe.equals("")) {
            //parcours du personnel des Service Cliniques
            for (int i = 0; i < this.chupp.getScs().getSize(); i++) {
                for (int j = 0; j < this.chupp.getScs().get(i).getPraticiens().getSize(); j++) {
                    if ((id.equals(this.chupp.getScs().get(i).getPraticiens().get(j).getNom())) && (mdp.equals(this.chupp.getScs().get(i).getPraticiens().get(j).getMdp()))
                            || ((id.equals(this.chupp.getScs().get(i).getChefDeService().getNom())) && (mdp.equals(this.chupp.getScs().get(i).getChefDeService().getMdp())))) {
                        spe = this.chupp.getScs().get(i).getPraticiens().get(j).getSpecialite();
                        sc = new ServiceCliniqueIU();
                        sc.setLocationRelativeTo(this);
                        sc.setChupp(this.chupp);
                        sc.setVisible(true);
                        sc.getjLabelService().setText(spe);
                    }
                }
                for (int j = 0; j < this.chupp.getScs().get(i).getInfirmiers().getSize(); j++) {
                    if ((id.equals(this.chupp.getScs().get(i).getInfirmiers().get(j).getNom())) && (mdp.equals(this.chupp.getScs().get(i).getInfirmiers().get(j).getMdp()))) {
                        spe = this.chupp.getScs().get(i).getInfirmiers().get(j).getSpecialite();
                        //infirmiers vont sur ServiceCliniqueSecretaireUI pour l'instant, attention a corriger !
                        scs = new ServiceCliniqueSecretaireUI();
                        scs.setLocationRelativeTo(this);
                        scs.setChupp(this.chupp);
                        scs.setVisible(true);
                        scs.getjLabelService().setText(spe);
                    }
                }
                for (int j = 0; j < this.chupp.getScs().get(i).getInternes().getSize(); j++) {
                    if ((id.equals(this.chupp.getScs().get(i).getInternes().get(j).getNom())) && (mdp.equals(this.chupp.getScs().get(i).getInternes().get(j).getMdp()))) {
                        spe = this.chupp.getScs().get(i).getInternes().get(j).getSpecialite();
                        //internes vont sur ServiceCliniqueSecretaireUI pour l'instant, attention a corriger !
                        scs = new ServiceCliniqueSecretaireUI();
                        scs.setLocationRelativeTo(this);
                        scs.setChupp(this.chupp);
                        scs.setVisible(true);
                        scs.getjLabelService().setText(spe);
                    }
                }
            }
            //parcours du personnel des ServicesMedicoTechniques
            for (int i = 0; i < this.chupp.getSmts().getSize(); i++) {
                for (int j = 0; j < this.chupp.getSmts().get(i).getPraticiens().getSize(); j++) {
                    if ((id.equals(this.chupp.getSmts().get(i).getPraticiens().get(j).getNom())) && (mdp.equals(this.chupp.getSmts().get(i).getPraticiens().get(j).getMdp()))
                            || ((id.equals(this.chupp.getSmts().get(i).getChefDeService().getNom())) && (mdp.equals(this.chupp.getSmts().get(i).getChefDeService().getMdp())))) {
                        spe = this.chupp.getSmts().get(i).getPraticiens().get(j).getSpecialite();
                        smt = new ServiceMedicoTechniquesIU();
                        smt.setLocationRelativeTo(this);
                        smt.setChupp(this.chupp);
                        smt.setVisible(true);
                        smt.getjLabelService().setText(spe);
                    }
                }
                for (int j = 0; j < this.chupp.getSmts().get(i).getInfirmiers().getSize(); j++) {
                    if ((id.equals(this.chupp.getSmts().get(i).getInfirmiers().get(j).getNom())) && (mdp.equals(this.chupp.getSmts().get(i).getInfirmiers().get(j).getMdp()))) {
                        spe = this.chupp.getSmts().get(i).getInfirmiers().get(j).getSpecialite();
                        //infirmiers vont sur ServiceCliniqueSecretaireUI pour l'instant, attention a corriger !
                        scs = new ServiceCliniqueSecretaireUI();
                        scs.setLocationRelativeTo(this);
                        scs.setChupp(this.chupp);
                        scs.setVisible(true);
                        scs.getjLabelService().setText(spe);
                    }
                }
                for (int j = 0; j < this.chupp.getSmts().get(i).getInternes().getSize(); j++) {
                    if ((id.equals(this.chupp.getSmts().get(i).getInternes().get(j).getNom())) && (mdp.equals(this.chupp.getSmts().get(i).getInternes().get(j).getMdp()))) {
                        spe = this.chupp.getSmts().get(i).getInternes().get(j).getSpecialite();
                        //internes vont sur ServiceCliniqueSecretaireUI pour l'instant, attention a corriger !
                        scs = new ServiceCliniqueSecretaireUI();
                        scs.setLocationRelativeTo(this);
                        scs.setChupp(this.chupp);
                        scs.setVisible(true);
                        scs.getjLabelService().setText(spe);
                    }
                }
            }
            //parcours du personnel informatique
            for(int i =0; i < this.chupp.getSi().getInformaticiens().getSize();i++){
                if((id.equals(this.chupp.getSi().getInformaticiens().get(i).getNom())) && (mdp.equals(this.chupp.getSi().getInformaticiens().get(i).getMdp()))){
                    spe = "Informatique";
                    si = new ServiceInformatiqueIU();
                    si.setLocationRelativeTo(this);
                    si.setVisible(true);
                }
            }
            //parcours du personnel du Service Admission
            for(int i =0;i<this.chupp.getSa().getSecretaires().getSize();i++){
                if(((id.equals(this.chupp.getSa().getSecretaires().get(i).getNom())) && (mdp.equals(this.chupp.getSa().getSecretaires().get(i).getMdp())))
                        || (id.equals(this.chupp.getSa().getChefDeService().getNom()) && (mdp.equals(this.chupp.getSa().getChefDeService().getMdp())))){
                    spe = "Admission";
                    //sa = new ServiceAdmission();
                    //sa.setLocationRelativeTo(this);
                    //sa.setVisible();
                }
            }
        }
    }

}
